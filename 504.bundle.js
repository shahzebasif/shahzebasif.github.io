"use strict";(self.webpackChunkshahzebasif=self.webpackChunkshahzebasif||[]).push([[504],{6504:(s,e,i)=>{i.r(e),i.d(e,{default:()=>n});const n='<nav id="TOC"> <ul> <li><a href="#interview" id="toc-interview"><span class="toc-section-number">1</span> interview</a></li> <li><a href="#questions" id="toc-questions"><span class="toc-section-number">2</span> questions</a></li> <li><a href="#resources" id="toc-resources"><span class="toc-section-number">3</span> resources</a></li> <li><a href="#libs" id="toc-libs"><span class="toc-section-number">4</span> libs</a></li> <li><a href="#patterns" id="toc-patterns"><span class="toc-section-number">5</span> patterns</a> <ul> <li><a href="#dynamic-programming" id="toc-dynamic-programming"><span class="toc-section-number">5.1</span> dynamic programming</a></li> <li><a href="#recursion" id="toc-recursion"><span class="toc-section-number">5.2</span> recursion</a></li> <li><a href="#backtracking" id="toc-backtracking"><span class="toc-section-number">5.3</span> backtracking</a></li> <li><a href="#graphs" id="toc-graphs"><span class="toc-section-number">5.4</span> graphs</a></li> <li><a href="#topological-sort" id="toc-topological-sort"><span class="toc-section-number">5.5</span> topological sort</a></li> <li><a href="#sliding-window" id="toc-sliding-window"><span class="toc-section-number">5.6</span> sliding window</a></li> <li><a href="#trees" id="toc-trees"><span class="toc-section-number">5.7</span> trees</a></li> <li><a href="#bst" id="toc-bst"><span class="toc-section-number">5.8</span> BST</a></li> <li><a href="#two-pointer" id="toc-two-pointer"><span class="toc-section-number">5.9</span> two-pointer</a></li> <li><a href="#linked-list" id="toc-linked-list"><span class="toc-section-number">5.10</span> linked list</a></li> <li><a href="#binary-search" id="toc-binary-search"><span class="toc-section-number">5.11</span> binary search</a></li> <li><a href="#heap" id="toc-heap"><span class="toc-section-number">5.12</span> heap</a></li> <li><a href="#trie" id="toc-trie"><span class="toc-section-number">5.13</span> trie</a></li> <li><a href="#prefix-sum" id="toc-prefix-sum"><span class="toc-section-number">5.14</span> prefix sum</a></li> </ul></li> </ul> </nav> <h1 data-number="1" id="interview"><span class="header-section-number">1</span> interview</h1> <ol> <li><p>get constraints</p></li> <li><p>identify basic test case</p></li> <li><p>identify brute force</p></li> <li><p>identify type of <a href="#problem-patterns">pattern</a></p></li> <li><p>write code</p> <ul> <li><p>don’t be afraid to use space to improve time.</p></li> <li><p>use built-in structs like <code>set</code>.</p></li> <li><p>do explicit equality checks.</p></li> <li><p>optimize <span><strong>out loud</strong></span></p></li> </ul></li> <li><p>run through basic test case</p></li> <li><p>find edge cases and bugs</p></li> </ol> <h1 data-number="2" id="questions"><span class="header-section-number">2</span> questions</h1> <ul> <li><p>dev tools investment?</p></li> <li><p>dealing with technical debt?</p></li> <li><p>eng-sat/20% time?</p></li> <li><p>learning on the job?</p></li> <li><p>internal moves difficulty?</p></li> <li><p>d&amp;i efforts?</p></li> <li><p>oncall rotations?</p></li> </ul> <h1 data-number="3" id="resources"><span class="header-section-number">3</span> resources</h1> <ul> <li><p><a href="https://seanprashad.com/leetcode-patterns/">leetcode patterns</a></p></li> <li><p><a href="https://gist.github.com/tykurtz/3548a31f673588c05c89f9ca42067bc4">grokking notes</a></p></li> <li><p><a href="https://www.techinterviewhandbook.org/grind75?order=all_rounded&amp;topics=array&amp;topics=stack&amp;topics=linked-list&amp;topics=string&amp;topics=binary-tree&amp;topics=binary-search&amp;topics=graph&amp;topics=dynamic-programming&amp;topics=binary-search-tree&amp;topics=heap&amp;topics=hash-table&amp;topics=recursion&amp;topics=matrix&amp;topics=queue&amp;topics=trie&amp;grouping=none#">grind75</a></p></li> </ul> <h1 data-number="4" id="libs"><span class="header-section-number">4</span> libs</h1> <p><code>[]</code></p> <ul> <li><p><code>pop()</code> used with <code>sort(reverse=True)</code></p></li> </ul> <p><code>set</code></p> <ul> <li><p><code>add()</code></p></li> <li><p><code>remove()</code></p></li> </ul> <p><code>queue.PriortyQueue</code></p> <ul> <li><p><code>put()</code></p></li> <li><p><code>get()</code></p></li> </ul> <p><code>collections.Counter</code></p> <ul> <li><p><code>most_common()</code></p></li> </ul> <p><code>collections.deque</code></p> <ul> <li><p><code>popleft()</code></p></li> </ul> <h1 data-number="5" id="patterns"><span class="header-section-number">5</span> patterns</h1> <h2 data-number="5.1" id="dynamic-programming"><span class="header-section-number">5.1</span> dynamic programming</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>repeated work</p></li> <li><p>often in exponential algorithms</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>cache the repeated work</p></li> <li><p>complexity will be distinct keys of the cache</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/coin-change/">coin change</a></p></li> </ul> <h2 data-number="5.2" id="recursion"><span class="header-section-number">5.2</span> recursion</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>problem can be broken into almost identical subproblem</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>call recursively on subproblems</p></li> <li><p>watch for signs of <a href="dynamic-programming">dynamic programming</a></p></li> </ul> <h2 data-number="5.3" id="backtracking"><span class="header-section-number">5.3</span> backtracking</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>involves building a path or something incrementally</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>use recursion, path param, and output param instead of returning</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/permutations/">permutations</a></p></li> </ul> <h2 data-number="5.4" id="graphs"><span class="header-section-number">5.4</span> graphs</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>anything that can be broken into nodes and edges</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>depth-first search can be done recursively</p></li> <li><p>breadth-first search requires a queue</p></li> <li><p>both approaches need a seen dictionary</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/binary-tree-right-side-view/">binary tree right side view</a></p></li> <li><p><a href="https://leetcode.com/problems/pacific-atlantic-water-flow/">pacific atlantic water flow</a></p></li> </ul> <h2 data-number="5.5" id="topological-sort"><span class="header-section-number">5.5</span> topological sort</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>same as graph</p></li> <li><p>key difference involves rules or dependencies</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>need a fast way to get all nodes with no incoming edges</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/course-schedule/">course schedule</a></p></li> </ul> <h2 data-number="5.6" id="sliding-window"><span class="header-section-number">5.6</span> sliding window</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>requires looking consecutive items in an array</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>involves removing the left hand’s item and adding the right hand item</p></li> <li><p>might be useful to change size of the sliding window for some problems</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">longest substring without repeating characters</a></p></li> </ul> <h2 data-number="5.7" id="trees"><span class="header-section-number">5.7</span> trees</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>chidren and a root node</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>can often be broken down into <a href="#recursion">recursion</a></p></li> <li><p>wide range of problems</p></li> <li><p>usually to do with paths between nodes</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/diameter-of-binary-tree/">diameter of binary tree</a></p></li> <li><p><a href="https://leetcode.com/problems/house-robber-iii/">house robber iii</a></p></li> </ul> <h2 data-number="5.8" id="bst"><span class="header-section-number">5.8</span> BST</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>tree with left nodes less than current and right nodes higher than current</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>preorder traversal is sorted</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/validate-binary-search-tree/">validate binary search tree</a></p></li> </ul> <h2 data-number="5.9" id="two-pointer"><span class="header-section-number">5.9</span> two-pointer</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>anything involving pairs</p></li> <li><p>useful if array can be split in two parts</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>wide variety of problems</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/valid-palindrome/">valid palindrome</a></p></li> <li><p><a href="https://leetcode.com/problems/trapping-rain-water/">trapping rain water</a></p></li> </ul> <h2 data-number="5.10" id="linked-list"><span class="header-section-number">5.10</span> linked list</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>obvious</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>use fast and slow pointers for cycles</p></li> <li><p>often use two pointers</p></li> <li><p>use two pointers for reversing or deleting Nth node</p></li> <li><p>remember to take care of the last node</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/odd-even-linked-list/">odd even linked list</a></p></li> </ul> <h2 data-number="5.11" id="binary-search"><span class="header-section-number">5.11</span> binary search</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>if sorted in some way, use binary search</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>watch for the end case where it might get stuck in an infinite loop</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/first-bad-version/">first bad version</a></p></li> </ul> <h2 data-number="5.12" id="heap"><span class="header-section-number">5.12</span> heap</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>use when we want top-N of anything</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>use python’s <code>queue.PriorityQueue()</code></p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/find-k-closest-elements/">find k closest elements</a></p></li> </ul> <h2 data-number="5.13" id="trie"><span class="header-section-number">5.13</span> trie</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>involves paths with common nodes or sub-paths</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>use sets to solve these as a backup since there is no built-in trie in python</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/longest-word-in-dictionary/">longest word in dictionary</a></p></li> </ul> <h2 data-number="5.14" id="prefix-sum"><span class="header-section-number">5.14</span> prefix sum</h2> <p><span><strong>signs</strong></span></p> <ul> <li><p>this is a trick to use when it’s about numbers adding up to something</p></li> </ul> <p><span><strong>tips</strong></span></p> <ul> <li><p>remember kadane’s algorithm</p></li> </ul> <p><span><strong>examples</strong></span></p> <ul> <li><p><a href="https://leetcode.com/problems/find-the-middle-index-in-array/">find the middle index in array</a></p></li> </ul> '}}]);